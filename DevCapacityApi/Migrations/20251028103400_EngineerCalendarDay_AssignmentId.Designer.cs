// <auto-generated />
using System;
using DevCapacityApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DevCapacityApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251028103400_EngineerCalendarDay_AssignmentId")]
    partial class EngineerCalendarDay_AssignmentId
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.10");

            modelBuilder.Entity("DevCapacityApi.Models.CompanyCalendar", b =>
                {
                    b.Property<int>("CompanyCalendarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("CompanyCalendarId");

                    b.ToTable("CompanyCalendars");
                });

            modelBuilder.Entity("DevCapacityApi.Models.CompanyCalendarNonWorkingDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompanyCalendarId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Day")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CompanyCalendarId");

                    b.ToTable("CompanyCalendarNonWorkingDays");
                });

            modelBuilder.Entity("DevCapacityApi.Models.Engineer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DailyCapacity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TeamId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("TeamId");

                    b.ToTable("Engineers");
                });

            modelBuilder.Entity("DevCapacityApi.Models.EngineerAssignment", b =>
                {
                    b.Property<int>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CapacityShare")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("EngineerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("TaskId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AssignmentId");

                    b.HasIndex("EngineerId");

                    b.HasIndex("TaskId");

                    b.ToTable("EngineerAssignments");
                });

            modelBuilder.Entity("DevCapacityApi.Models.EngineerCalendar", b =>
                {
                    b.Property<int>("EngineerCalendarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EngineerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("EngineerCalendarId");

                    b.HasIndex("EngineerId")
                        .IsUnique();

                    b.ToTable("EngineerCalendars");
                });

            modelBuilder.Entity("DevCapacityApi.Models.EngineerCalendarDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AssignmentId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("EngineerCalendarId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EngineerCalendarId");

                    b.ToTable("EngineerCalendarDays");
                });

            modelBuilder.Entity("DevCapacityApi.Models.Initiatives", b =>
                {
                    b.Property<int>("InitiativeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PDs")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ParentInitiative")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("InitiativeId");

                    b.HasIndex("ParentInitiative");

                    b.ToTable("Initiatives");
                });

            modelBuilder.Entity("DevCapacityApi.Models.Status", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("StatusId");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("DevCapacityApi.Models.Tasks", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Initiative")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxResources")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PDs")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("TaskId");

                    b.HasIndex("Initiative");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("DevCapacityApi.Models.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ParentTeam")
                        .HasColumnType("INTEGER");

                    b.HasKey("TeamId");

                    b.HasIndex("ParentTeam");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("DevCapacityApi.Models.CompanyCalendarNonWorkingDay", b =>
                {
                    b.HasOne("DevCapacityApi.Models.CompanyCalendar", "CompanyCalendar")
                        .WithMany("NonWorkingDays")
                        .HasForeignKey("CompanyCalendarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyCalendar");
                });

            modelBuilder.Entity("DevCapacityApi.Models.Engineer", b =>
                {
                    b.HasOne("DevCapacityApi.Models.Team", "Team")
                        .WithMany("Engineers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Team");
                });

            modelBuilder.Entity("DevCapacityApi.Models.EngineerAssignment", b =>
                {
                    b.HasOne("DevCapacityApi.Models.Engineer", "Engineer")
                        .WithMany("Assignments")
                        .HasForeignKey("EngineerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevCapacityApi.Models.Tasks", "Task")
                        .WithMany("Assignments")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Engineer");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("DevCapacityApi.Models.EngineerCalendar", b =>
                {
                    b.HasOne("DevCapacityApi.Models.Engineer", "Engineer")
                        .WithOne("Calendar")
                        .HasForeignKey("DevCapacityApi.Models.EngineerCalendar", "EngineerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Engineer");
                });

            modelBuilder.Entity("DevCapacityApi.Models.EngineerCalendarDay", b =>
                {
                    b.HasOne("DevCapacityApi.Models.EngineerCalendar", "EngineerCalendar")
                        .WithMany("CalendarDays")
                        .HasForeignKey("EngineerCalendarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EngineerCalendar");
                });

            modelBuilder.Entity("DevCapacityApi.Models.Initiatives", b =>
                {
                    b.HasOne("DevCapacityApi.Models.Initiatives", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentInitiative")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("DevCapacityApi.Models.Tasks", b =>
                {
                    b.HasOne("DevCapacityApi.Models.Initiatives", "InitiativeNav")
                        .WithMany("Tasks")
                        .HasForeignKey("Initiative")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("InitiativeNav");
                });

            modelBuilder.Entity("DevCapacityApi.Models.Team", b =>
                {
                    b.HasOne("DevCapacityApi.Models.Team", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentTeam")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("DevCapacityApi.Models.CompanyCalendar", b =>
                {
                    b.Navigation("NonWorkingDays");
                });

            modelBuilder.Entity("DevCapacityApi.Models.Engineer", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Calendar");
                });

            modelBuilder.Entity("DevCapacityApi.Models.EngineerCalendar", b =>
                {
                    b.Navigation("CalendarDays");
                });

            modelBuilder.Entity("DevCapacityApi.Models.Initiatives", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("DevCapacityApi.Models.Tasks", b =>
                {
                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("DevCapacityApi.Models.Team", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Engineers");
                });
#pragma warning restore 612, 618
        }
    }
}
